#+TITLE:Variost terst 
#+AUTHOR: Fred K. Gruber
#+email: fred@gnshealthcare.com
#+PROPERTY: header-args :tangle yes :eval never-export
#+PROPERTY: header-args:R :session *R* :exports both
#+OPTIONS: ^:{}
-----

* Things to try

** Tied weights
https://github.com/rstudio/keras/issues/778
https://stackoverflow.com/questions/57242141/how-to-share-weight-between-two-keras-layers
https://towardsdatascience.com/build-the-right-autoencoder-tune-and-optimize-using-pca-principles-part-ii-24b9cca69bd6

* Test autoencoders
#+begin_src R
source("LatentConfounderBNlearn.R")
load("/Users/fred/Documents/projects/latvar/res_alldata.RData", verbose = T)
load("final_model_nolvp_novp.RData", verbose = T)
reticulate::conda_list()
reticulate::use_condaenv("tensorflowv1")
library(keras)
keras::is_keras_available()
tensorflow::tf_version()
K <- backend()
K$clear_session()

train = datalist$data_noisy
vars = getDrivers(res_alldata, 'Z', maxpath = 2, cutoff = 0.1)$Drivers

resList = getREFSresiduals (res_alldata,
                            vars)

resDev = residualDeviance(train,
                          resList, isOrdinal = T)



tst = findLatentVars(resDev,
                     method = 'autoencoder'
                     )

tst$confounders %>%
    cor(train$U2.out)


tstlin = findLatentVars(resDev,
                     method = 'linear'
                     )


tstlin$confounders %>%
    cor(train$U2.out)

tstlin$confounders %>%
    cor(train$U1.out)

myplot = function(tstlin, train){
    toplot = cbind(as.data.frame(tstlin$confounder), train[, c("U1.out", "U2.out")]) %>% gather(var, val, -U1.out, -U2.out)
    ggp1 = toplot%>% ggplot(aes(x = U1.out, y = val)) + geom_point() + facet_wrap( ~ var)
    ggp2 = toplot %>% ggplot(aes(x = U2.out, y = val)) + geom_point() + facet_wrap( ~ var)
    cowplot::plot_grid(ggp1, ggp2, ncol = 1)
}

##myplot(tst, train)



myplot(tstlin, train)

tstlin$confounders %>%
    cor(train$U1.out)

tstlin$confounders %>%
    cor(train$U2.out)

(arch = rev(round(exp(seq(log(4), log(min(200, ncol(resDev)/2)), length.out=4)))))

fwrite(resDev, file = "resDev.csv")

tstaelin = findLatentVars(resDev,
                          scale. = T, 
                          method = 'autoencoder',
                          architecture=2, 
                          activation = 'linear',
                          drRate=0.0,
                          use_batch_norm=F,
                          nIter = 500,
                          batch_size = 32,
                          optimizer = "RMSprop",
                          metrics = 'mse', learning_rate = 0.05,
                          fname = "fitae_1layer_pca_rmsprop_lr005_itera500.pdf"
                     )

tstaelin = findLatentVars(resDev,
                          scale. = T, 
                          method = 'autoencoder',
                          architecture=c(20, 10, 5, 3), 
                          activation = 'relu',
                          drRate=0.3,
                          use_batch_norm=F,
                          nIter = 500,
                          batch_size = 32,
                          optimizer = "RMSprop",
                          metrics = 'mse', learning_rate = 0.05,
                          fname = "fitae_rmsprop_lr005_itera500.pdf"
                     )

tstaelin$confounders %>%
    cor(train$U1.out)

tstaelin$confounders %>%
    cor(train$U2.out)

myplot(tstaelin, train)

newaepred = fread("predae.csv", data.table = F)

newaepred %>% cor(train$U1.out)

newaepred %>% cor(train$U2.out)
#+end_src

* Tied Weights Autoencoder

** R
#+begin_src R
library(keras)

DenseTied <- R6::R6Class("DenseTied",
  inherit = KerasLayer,
  public = list(
      master_layer = NULL, 
      output_dim = NULL,
      weights = NULL,
      bias = NULL, 
      initialize = function(master_layer = NULL) {
          self$master_layer = master_layer
      },
      build = function(input_shape) {
          self$weights = k_transpose(self$master_layer$weights[[1]])
          self$output_dim <- self$weights$shape$as_list()[[2]]
          self$bias <- self$add_weight(
                             name = 'bias',
                             shape = list(self$output_dim),
                             initializer = initializer_constant(0),
                             trainable = TRUE
                            )
          message("build worked fine")
      },
      call = function(x, mask = NULL) {
          message("in call")
          browser()
          res = k_dot(x, self$weights) + self$bias
          message("finished call")
          res
      },
      compute_output_shape = function(input_shape) {
          message("in shape")
          res = list(input_shape[[1]], self$output_dim)
          message("finished shape")
          res
    }
  )
  )

layer_densetied <- function(object, master_layer, name = NULL, trainable = TRUE) {
    browser()
    create_layer(DenseTied, object, list(
                                        master_layer = master_layer,
                                        name = name,
                                        trainable = trainable
                                    )
                 )
}



input_layer <- layer_input(shape = ncol(mtcars))
l1 =   layer_dense(units = 100, input_shape = 11)
l2 = layer_dense(units = 10)
l3 = layer_dense(units = 2)
decl1 = layer_tied_dense(master_layer = l3)
decl2 = layer_tied_dense(master_layer = l2)
decl3 = layer_tied_dense(master_layer = l1)


output = input_layer %>%
    l1() %>%
    layer_activation('relu') %>%
    layer_dropout(0.2) %>% 
    l2() %>%
    layer_activation("relu") %>%
    layer_dropout(0.2) %>% 
    l3() %>%
    layer_activation("relu") %>%
    decl1() %>%
    layer_activation("relu") %>%
    decl2() %>%
    layer_activation("relu") %>%
    decl3() %>% 
    layer_activation("linear")

model <- keras_model(inputs = input_layer,
                     outputs = output
                     )

model %>%
  compile(
      loss = "mse",
      optimizer = "adam"
  )

history = keras::fit(model, as.matrix(mtcars),
                   as.matrix(mtcars),
                   epochs=1000,
                   batch_size=32, 
                   shuffle=TRUE,
                   ##validation_data= list(x_train, x_train)
                   validation_split = 0.1
           )


plot(history)

model$layers[[5]]$weights[[1]] %>% dim
model$layers[[10]]$get_weights()




input <- layer_input(shape = ncol(mtcars))

dense_1 <- layer_dense(units = 128)
dense_2 <- layer_dense(units = 256)
dense_3 <- layer_dense(units = 256)

dense_6 <- layer_dense(units = 128)
dense_5 <- layer_dense(units = 256)
dense_4 <- layer_dense(units = 256)
out = layer_dense(units = 11)


dense_1_transposed <- layer_tied_dense(master_layer = dense_1)
dense_2_transposed <- layer_tied_dense(master_layer = dense_2)
dense_3_transposed <- layer_tied_dense(master_layer = dense_3)

output <- input %>%
    dense_1() %>%
    layer_activation("selu") %>%
    dense_2() %>%
    layer_activation("selu") %>%
    dense_3() %>%
    layer_activation("selu") %>%
    layer_dropout(0.2) %>%
    dense_3_transposed() %>%
    layer_activation("selu") %>%
    dense_2_transposed() %>%
    layer_activation("selu") %>%
    dense_1_transposed() %>%
    layer_activation("selu")
  

model %>%
  compile(
      loss = "mse",
      optimizer = "adam"
  )

keras::fit(model, as.matrix(mtcars),
                   as.matrix(mtcars),
                   epochs=10,
                   batch_size=16, 
                   shuffle=TRUE,
                   ##validation_data= list(x_train, x_train)
           validation_split = 0.1
           )




output <- input %>%
  dense_1() %>%
    layer_activation("relu") %>%
    dense_1_transposed() %>%
    layer_activation("relu")


input <- layer_input(shape = ncol(mtcars))

output <- input %>%
  dense_1() %>%
  layer_activation("selu") %>%
  dense_2() %>%
  layer_activation("selu") %>%
  dense_3() %>%
  layer_activation("selu") %>%
  layer_dropout(0.65) %>%
  dense_4() %>%
  layer_activation("selu") %>%
  dense_5() %>%
  layer_activation("selu") %>%
  dense_6() %>%
    layer_activation("selu") %>%
    out()





masked_mse <- function(y_true, y_pred) {
  mask_true <- k_cast(k_not_equal(y_true, 0), k_floatx())
  masked_squared_error <- k_square(mask_true * (y_true - y_pred))
  masked_mse <- k_sum(masked_squared_error)/k_sum(mask_true)
  masked_mse
}

rmse <- function(y_true, y_pred) {
  masked_mse(y_true, y_pred) ^ 0.5
}


model %>%
  compile(
      loss = "mse",
      metrics = list(rmse = rmse), 
      optimizer = "adam"
  )

keras::fit(model, as.matrix(mtcars),
                   as.matrix(mtcars),
                   epochs=10,
                   batch_size=16, 
                   shuffle=TRUE,
                   ##validation_data= list(x_train, x_train)
           validation_split = 0.1
           )



model %>%
  fit_generator(
    sparse_generator(as.matrix(mtcars), 128),
    epochs = 100,
    steps_per_epoch = nrow(as.matrix(mtcars))/128,
    callbacks = callback_tensorboard()
  )


evaluate_generator(model, sparse_generator(netflix3m$test, batch_size = 128), steps = 1000)




split_ind <- iris$Species %>% caret::createDataPartition(p = 0.8,list = FALSE)
train <- iris[split_ind,]
test <- iris[-split_ind,]
train_X <- train[,1:4] %>% as.matrix()

train_y <- train[,5] %>%as.integer %>% 
    keras::to_categorical()

test_X <- test[,1:4] %>% as.matrix()

input_layer <- 
  layer_input(shape = c(4)) 

encoder <- 
  input_layer %>% 
  layer_dense(units = 150, activation = "relu") %>% 
  layer_batch_normalization() %>% 
  layer_dropout(rate = 0.2) %>% 
  layer_dense(units = 50, activation = "relu") %>%
  layer_dropout(rate = 0.1) %>%
  layer_dense(units = 25, activation = "relu") %>%
  layer_dense(units = 2) # 2 dimensions for the output layer

decoder <- 
  encoder %>% 
  layer_dense(units = 150, activation = "relu") %>% 
  layer_dropout(rate = 0.2) %>% 
  layer_dense(units = 50, activation = "relu") %>%
  layer_dropout(rate = 0.1) %>%
  layer_dense(units = 25, activation = "relu") %>%
  layer_dense(units = 4) # 4 dimensions for the original 4 variables

autoencoder_model <- keras_model(inputs = input_layer, outputs = decoder)

autoencoder_model %>% compile(
  loss='mean_squared_error',
  optimizer='adam',
  metrics = c('accuracy')
)

summary(autoencoder_model)


history <-
  autoencoder_model %>%
  keras::fit(train_X,
             train_X,
             epochs=100,
             shuffle=TRUE,
             validation_data= list(test_X, test_X)
             )


input_layer <- 
  layer_input(shape = c(4)) 


dense_1 <- layer_dense(units = 150, activation = 'relu')
dense_2 <- layer_dense(units = 3, activation = "relu")
dense_2_t = layer_tied_dense(master_layer = dense_2)
dense_1_t = layer_tied_dense(master_layer = dense_1)


encoder <- 
  input_layer %>% 
  dense_1() %>%
  dense_2_t()

decoder <- 
  encoder %>% 
  dense_2_t() %>%
  dense_1_t() 

autoencoder_model <- keras_model(inputs = input_layer, outputs = decoder)

autoencoder_model %>% compile(
  loss='mean_squared_error',
  optimizer='adam',
  metrics = c('accuracy')
)

summary(autoencoder_model)


history <-
  autoencoder_model %>%
  keras::fit(train_X,
             train_X,
             epochs=100,
             shuffle=TRUE,
             validation_data= list(test_X, test_X)
             )


## try this one
dense_1 <- layer_dense(units = 128)
dense_2 <- layer_dense(units = 10)
dense_3 <- layer_dense(units = 2)
dense_1_transposed <- layer_tied_dense(master_layer = dense_1)
dense_2_transposed <- layer_tied_dense(master_layer = dense_2)
dense_3_transposed <- layer_tied_dense(master_layer = dense_3)


input <- layer_input(shape = ncol(mtcars))
output <- input %>%
    dense_1() %>%
    layer_activation("selu") %>%
    dense_2() %>%
    layer_activation("selu") %>%
    dense_3() %>%
    layer_activation("selu") %>%
    layer_dropout(0.2) %>%
    dense_3_transposed() %>%
    layer_activation("selu") %>%
    dense_2_transposed() %>%
    layer_activation("selu") %>%
    dense_1_transposed() %>%
    layer_activation("selu")

model <- keras_model(input, output)

model %>%
  compile(
      loss = "mse",
      optimizer = "adam"
  )

keras::fit(model, as.matrix(mtcars),
                   as.matrix(mtcars),
                   epochs=10,
                   batch_size=16, 
                   shuffle=TRUE,
                   ##validation_data= list(x_train, x_train)
           validation_split = 0.1
           )

model$layers[[4]]$kernel
model$layers[[9]]$kernel
model$layers[[9]]$get_weights()


dense_1 <- layer_dense(units = 128)
dense_2 <- layer_dense(units = 10)
dense_3 <- layer_dense(units = 2)
dense_1_transposed <- DenseTiedLayer$new(tied_to = dense_1, units = ncol(128))
dense_2_transposed <- DenseTiedLayer$new(tied_to = dense_2, units = 10)
dense_3_transposed <- DenseTiedLayer$new(tied_to = dense_3, units = 2)


input <- layer_input(shape = ncol(mtcars))
output <- input %>%
    dense_1() %>%
    layer_activation("selu") %>%
    dense_2() %>%
    layer_activation("selu") %>%
    dense_3() %>%
    layer_activation("selu") %>%
    layer_dropout(0.2) %>%
    dense_3_transposed() %>%
    layer_activation("selu") %>%
    dense_2_transposed() %>%
    layer_activation("selu") %>%
    dense_1_transposed() %>%
    layer_activation("selu")

model <- keras_model(input, output)

model %>%
  compile(
      loss = "mse",
      optimizer = "adam"
  )

keras::fit(model, as.matrix(mtcars),
                   as.matrix(mtcars),
                   epochs=10,
                   batch_size=16, 
                   shuffle=TRUE,
                   ##validation_data= list(x_train, x_train)
           validation_split = 0.1
           )

model$layers[[4]]$kernel
model$layers[[9]]$kernel
#+end_src
** python
#+begin_src python
class DenseTied(Layer):
    def __init__(self, units,
                 activation=None,
                 use_bias=True,
                 kernel_initializer='glorot_uniform',
                 bias_initializer='zeros',
                 kernel_regularizer=None,
                 bias_regularizer=None,
                 activity_regularizer=None,
                 kernel_constraint=None,
                 bias_constraint=None,
                 tied_to=None,
                 ,**kwargs):
        self.tied_to = tied_to
        if 'input_shape' not in kwargs and 'input_dim' in kwargs:
            kwargs['input_shape'] = (kwargs.pop('input_dim'),)
        super().__init__(**kwargs)
        self.units = units
        self.activation = activations.get(activation)
        self.use_bias = use_bias
        self.kernel_initializer = initializers.get(kernel_initializer)
        self.bias_initializer = initializers.get(bias_initializer)
        self.kernel_regularizer = regularizers.get(kernel_regularizer)
        self.bias_regularizer = regularizers.get(bias_regularizer)
        self.activity_regularizer = regularizers.get(activity_regularizer)
        self.kernel_constraint = constraints.get(kernel_constraint)
        self.bias_constraint = constraints.get(bias_constraint)
        self.input_spec = InputSpec(min_ndim=2)
        self.supports_masking = True
                
    def build(self, input_shape):
        assert len(input_shape) >= 2
        input_dim = input_shape[-1]

        if self.tied_to is not None:
            self.kernel = K.transpose(self.tied_to.kernel)
            self._non_trainable_weights.append(self.kernel)
        else:
            self.kernel = self.add_weight(shape=(input_dim, self.units),
                                          initializer=self.kernel_initializer,
                                          name='kernel',
                                          regularizer=self.kernel_regularizer,
                                          constraint=self.kernel_constraint)
        if self.use_bias:
            self.bias = self.add_weight(shape=(self.units,),
                                        initializer=self.bias_initializer,
                                        name='bias',
                                        regularizer=self.bias_regularizer,
                                        constraint=self.bias_constraint)
        else:
            self.bias = None
        self.input_spec = InputSpec(min_ndim=2, axes={-1: input_dim})
        self.built = True

    def compute_output_shape(self, input_shape):
        assert input_shape and len(input_shape) >= 2
        output_shape = list(input_shape)
        output_shape[-1] = self.units
        return tuple(output_shape)

    def call(self, inputs):
        output = K.dot(inputs, self.kernel)
        if self.use_bias:
            output = K.bias_add(output, self.bias, data_format='channels_last')
        if self.activation is not None:
            output = self.activation(output)
        return output
#+end_src
* Python version of optimal autoencoder
#+begin_src python
from numpy.random import seed
seed(123)
from tensorflow import set_random_seed
##from tensorflow.compat.v1 import set_random_seed
set_random_seed(234)
import sklearn
from sklearn import datasets
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn import decomposition
import scipy
import tensorflow as tf
from keras.models import Model, load_model
from keras.layers import Input, Dense, Layer, InputSpec
from keras.callbacks import ModelCheckpoint, TensorBoard
from keras import regularizers, activations, initializers, constraints, Sequential
from keras import backend as K
from keras.constraints import UnitNorm, Constraint
import pandas as pd
exec(open("aupy.py").read())

df = pd.read_csv("/Users/fred/Documents/projects/latvar/resDev.csv", header = 0)

X_train, X_test = train_test_split(df, test_size=0.5, random_state=123)



# Scale the data between 0 and 1.
scaler = MinMaxScaler()
scaler.fit(X_train)
X_train_scaled = scaler.transform(X_train)
X_test_scaled = scaler.transform(X_test)
X_train_scaled

scaler2=MinMaxScaler()
scaler2.fit(df)

df_scaled=scaler2.transform(df)

nb_epoch = 500
batch_size = 16
input_dim = X_train_scaled.shape[1] #num of predictor variables, 
encoding_dim = 2
learning_rate = 1e-3


encoder = Dense(encoding_dim, activation="linear", input_shape=(input_dim,), use_bias = True, kernel_regularizer=WeightsOrthogonalityConstraint(encoding_dim, weightage=1., axis=0), kernel_constraint=UnitNorm(axis=0)) 
decoder = DenseTied(input_dim, activation="linear", tied_to=encoder, use_bias = False)
autoencoder = Sequential()
autoencoder.add(encoder)
autoencoder.add(decoder)
autoencoder.compile(metrics=['accuracy'],
                    loss='mean_squared_error',
                    optimizer='sgd')
autoencoder.summary()
autoencoder.fit(X_train_scaled, X_train_scaled,
                epochs=nb_epoch,
                batch_size=batch_size,
                shuffle=True,
                verbose=0)
train_predictions = autoencoder.predict(X_train_scaled)
print('Train reconstrunction error\n', sklearn.metrics.mean_squared_error(X_train_scaled, train_predictions))
test_predictions = autoencoder.predict(X_test_scaled)
print('Test reconstrunction error\n', sklearn.metrics.mean_squared_error(X_test_scaled, test_predictions))

latvar=encoder.predict(X_train_scaled)


train_predictions = autoencoder.predict(X_train_scaled)

autoencoder.fit(df_scaled,df_scaled,
                epochs=nb_epoch,
                batch_size=batch_size,
                shuffle=True,
                verbose=0)

enc=Sequential()
enc.add(encoder)


from keras.utils import plot_model
plot_model(autoencoder, to_file='model.png')



train_predictions_enc = enc.predict(df_scaled)


np.savetxt("predae.csv", train_predictions_enc, delimiter=",")
#+end_src
** function
#+begin_src python :tangle aupy.py
class DenseTied(Layer):
    def __init__(self, units,
                 activation=None,
                 use_bias=True,
                 kernel_initializer='glorot_uniform',
                 bias_initializer='zeros',
                 kernel_regularizer=None,
                 bias_regularizer=None,
                 activity_regularizer=None,
                 kernel_constraint=None,
                 bias_constraint=None,
                 tied_to=None,
                 ,**kwargs):
        self.tied_to = tied_to
        if 'input_shape' not in kwargs and 'input_dim' in kwargs:
            kwargs['input_shape'] = (kwargs.pop('input_dim'),)
        super().__init__(**kwargs)
        self.units = units
        self.activation = activations.get(activation)
        self.use_bias = use_bias
        self.kernel_initializer = initializers.get(kernel_initializer)
        self.bias_initializer = initializers.get(bias_initializer)
        self.kernel_regularizer = regularizers.get(kernel_regularizer)
        self.bias_regularizer = regularizers.get(bias_regularizer)
        self.activity_regularizer = regularizers.get(activity_regularizer)
        self.kernel_constraint = constraints.get(kernel_constraint)
        self.bias_constraint = constraints.get(bias_constraint)
        self.input_spec = InputSpec(min_ndim=2)
        self.supports_masking = True
                
    def build(self, input_shape):
        assert len(input_shape) >= 2
        input_dim = input_shape[-1]

        if self.tied_to is not None:
            self.kernel = K.transpose(self.tied_to.kernel)
            self._non_trainable_weights.append(self.kernel)
        else:
            self.kernel = self.add_weight(shape=(input_dim, self.units),
                                          initializer=self.kernel_initializer,
                                          name='kernel',
                                          regularizer=self.kernel_regularizer,
                                          constraint=self.kernel_constraint)
        if self.use_bias:
            self.bias = self.add_weight(shape=(self.units,),
                                        initializer=self.bias_initializer,
                                        name='bias',
                                        regularizer=self.bias_regularizer,
                                        constraint=self.bias_constraint)
        else:
            self.bias = None
        self.input_spec = InputSpec(min_ndim=2, axes={-1: input_dim})
        self.built = True

    def compute_output_shape(self, input_shape):
        assert input_shape and len(input_shape) >= 2
        output_shape = list(input_shape)
        output_shape[-1] = self.units
        return tuple(output_shape)

    def call(self, inputs):
        output = K.dot(inputs, self.kernel)
        if self.use_bias:
            output = K.bias_add(output, self.bias, data_format='channels_last')
        if self.activation is not None:
            output = self.activation(output)
        return output


class WeightsOrthogonalityConstraint (Constraint):
    def __init__(self, encoding_dim, weightage = 1.0, axis = 0):
        self.encoding_dim = encoding_dim
        self.weightage = weightage
        self.axis = axis
        
    def weights_orthogonality(self, w):
        if(self.axis==1):
            w = K.transpose(w)
        if(self.encoding_dim > 1):
            m = K.dot(K.transpose(w), w) - K.eye(self.encoding_dim)
            return self.weightage * K.sqrt(K.sum(K.square(m)))
        else:
            m = K.sum(w ** 2) - 1.
            return m

    def __call__(self, w):
        return self.weights_orthogonality(w)

class UncorrelatedFeaturesConstraint (Constraint):
    
    def __init__(self, encoding_dim, weightage = 1.0):
        self.encoding_dim = encoding_dim
        self.weightage = weightage
    
    def get_covariance(self, x):
        x_centered_list = []

        for i in range(self.encoding_dim):
            x_centered_list.append(x[:, i] - K.mean(x[:, i]))
        
        x_centered = tf.stack(x_centered_list)
        covariance = K.dot(x_centered, K.transpose(x_centered)) / tf.cast(x_centered.get_shape()[0], tf.float32)
        
        return covariance
            
    # Constraint penalty
    def uncorrelated_feature(self, x):
        if(self.encoding_dim <= 1):
            return 0.0
        else:
            output = K.sum(K.square(
                self.covariance - tf.math.multiply(self.covariance, K.eye(self.encoding_dim))))
            return output

    def __call__(self, x):
        self.covariance = self.get_covariance(x)
        return self.weightage * self.uncorrelated_feature(x)


#+end_src
* R version of python code
#+begin_src R
DenseTiedLayer <- R6::R6Class(
                          "DenseTiedLayer",
                          inherit = KerasLayer,
                          public = list(
                              tied_to = NULL,
                              units = NULL,
                              activation = NULL,
                              use_bias = NULL,
                              kernel_initializer = NULL,
                              bias_initializer = NULL,
                              activity_regularizer = NULL,
                              kernel_constraint = NULL,
                              bias_constraint = NULL,
                              initialize = function(units,
                                                    activation = NULL,
                                                    use_bias = TRUE,
                                                    kernel_initializer = "glorot_uniform",
                                                    bias_initializer = "zeros",
                                                    bias_regularizer = NULL,
                                                    activity_regularizer = NULL,
                                                    kernel_constraint = NULL,
                                                    bias_constraint = NULL,
                                                    tied_to = NULL,
                                                    ...
                                                    ) {
                                  self$tied_to <- tied_to
                                  self$units = units
                                  self$activation = activation
                                  self$use_bias = use_bias
                                  self$kernel_initializer = kernel_initializer
                                  self$bias_initializer = bias_initializer
                                  self$activity_regularizer = activity_regularizer
                                  self$kernel_constraint = kernel_constraint
                                  self$bias_constraint = bias_constraint
                              },
                              build = function(input_shape) {
                                  input_dim = input_shape[2]
                                  if(!is.null(self$tied_to)){
                                      self$kernel = k_transpose(self$tied_to$kernel)
                                  }else{
                                      self$kernel <- self$add_weight(
                                                              name = 'kernel',
                                                              shape = list(self$output_dim),
                                                              initializer = self$kernel_initializer,
                                                              regularizer = self$kernel_regularizer,
                                                              constraint = self$kernel_constraint,
                                                              trainable = TRUE
                                                          )
                                  }
                                  if(self$use_bias){
                                      self$bias <- self$add_weight(
                                                            name = 'bias',
                                                            shape = list(self$output_dim),
                                                            initializer = initializer_constant(0),
                                                            regularizer = self$bias_regularizer,
                                                            constraint = self$bias_constraint,
                                                            trainable = TRUE
                                                        )
                                  }else
                                      self$bias = NULL
                              },
                              compute_output_shape = function(input_shape) {
                                  list(input_shape[[1]], self$output_dim)
                              },
                              call = function(x, mask = NULL) {
                                  output = k_dot(x, self$kernel)
                                  if(self$use_bias)
                                      output = k_bias_add(output, self$bias)
                                  if(!is.null(self$activation)){
                                      output = self$activation(output)
                                  }
                                  return(output)
                              }
                          )
                      )




library(keras)

CustomLayer <- R6::R6Class("CustomLayer",
                                  
  inherit = KerasLayer,
  
  public = list(
    
    output_dim = NULL,
    
    kernel = NULL,
    
    initialize = function(output_dim) {
      self$output_dim <- output_dim
    },
    
    build = function(input_shape) {
      self$kernel <- self$add_weight(
        name = 'kernel', 
        shape = list(input_shape[[2]], self$output_dim),
        initializer = initializer_random_normal(),
        trainable = TRUE
      )
    },
    
    call = function(x, mask = NULL) {
      k_dot(x, self$kernel)
    },
    
    compute_output_shape = function(input_shape) {
      list(input_shape[[1]], self$output_dim)
    }
  )
  )

layer_custom <- function(object, output_dim, name = NULL, trainable = TRUE) {
  create_layer(CustomLayer, object, list(
    output_dim = as.integer(output_dim),
    name = name,
    trainable = trainable
  ))
}

# use it in a model
model <- keras_model_sequential()
model %>% 
  layer_dense(units = 32, input_shape = c(32,32)) %>% 
  layer_custom(output_dim = 32)
#+end_src
